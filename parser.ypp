%{
#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>
#include "absyn.hpp"
#include "symbol.hpp"
#include "frame.hpp"
#include "mips.hpp"
#include "semant.hpp"
#include "translate.hpp"
#include "tree.hpp"
#include "errormsg.hpp"
#include "canon.hpp"
#define YYDEBUG 1

int yylex();

void yyerror(std::string s) {
  std::cerr << s << std::endl;
  exit(EXIT_FAILURE);
}

template<typename Base, typename T>
inline bool instanceof(const T *ptr) {
    return dynamic_cast<const Base*>(ptr) != nullptr;
}

void prStmList(tree::Print* print, tree::StmList* stms) {
	for (tree::StmList* l = stms; l != nullptr; l = l->m_tail){
		print->prStm(l->m_head);
	}
}


void emitProc(std::ostream& out, frag::ProcFrag* f)
{
	tree::Print* print = new tree::Print(out);

//	tree::Stm* x = f->m_body;
//	print->prStm(x); //ok

	tree::StmList* stms = canon::Canon::linearize(f->m_body);
//	prStmList(print, stms);
	canon::BasicBlocks* b = new canon::BasicBlocks(stms);
	tree::StmList* traced = (new canon::TraceSchedule(b))->m_stms;
	prStmList(print, traced);

}


%}


%union {
  int d;
  std::string* s;
  absyn::Absyn* synTree;
  absyn::ExpList* expList;
  absyn::DecList* decList;
}

%token VAR_T TYPE_T FUNC_T LET_T IN_T END_T IF_T ELSE_T THEN_T WHILE_T FOR_T DO_T BREAK_T NIL_T ARRAY_T DOT_T AND_T OR_T EQ_T GT_T GE_T LT_T LE_T NEQ_T DIV_T OF_T ASSIGN_T PLUS_T MINUS_T TIMES_T TO_T COLON_T
%token <d> NUM_T
%token <s> ID_T STRING_T
%type <synTree> program expr lvalue fieldlist declaration typedeclist typedeclaration type typefields variabledeclaration functiondeclist functiondeclaration
%type <expList> exprlist exprseq
%type <decList> declarationlist


%right FUNC_T TYPE_T
%right OF_T
%right DO_T ELSE_T THEN_T
%nonassoc ASSIGN_T
%left OR_T
%left AND_T
%nonassoc EQ_T NEQ_T LT_T LE_T GT_T GE_T
%left PLUS_T MINUS_T
%left TIMES_T DIV_T
%left '('
%nonassoc ID_T 
%nonassoc '['


%%
program : expr { $$ = $1;

	    std::string filename = "tests/test.tig";
	    tiger::errormsg::ErrorMsg* errorMsg = new tiger::errormsg::ErrorMsg(filename);

	    absyn::Print pr(std::cout);
		// print ast
//	    pr.prExp((absyn::Exp*)$$, 0);
//	    std::cout << std::endl;

		frame::Frame* frame = new mips::MipsFrame();
		translate::Translate* translator = new translate::Translate(frame);
		semant::Semant* smt = new semant::Semant(translator, errorMsg);
		frag::Frag* frags = smt->transProg((absyn::Exp*)$$);


		if (tiger::errormsg::ErrorMsg::anyErrors == false) {

				std::cout << ".globl main" << std::endl;

			for (frag::Frag* f = frags; f != nullptr; f = f->m_next){
				if (instanceof<frag::ProcFrag>(f))
				{
					emitProc(std::cout, (frag::ProcFrag*)f);
				}
				else if (instanceof<frag::DataFrag>(f)) {
					std::cout << ("\n.data\n" + ((frag::DataFrag*)f)->m_data);
				}
			}
	   }

       //delete $$;
}
;

expr : MINUS_T expr { $$ = new absyn::OpExp(0, new absyn::IntExp($2->m_pos,0), absyn::OpExp::MINUS, (absyn::Exp*)$2); } 
	  | NUM_T { $$ = new absyn::IntExp(0, $1); }
	  | STRING_T { $$ = new absyn::StringExp(0, *$1); delete $1; }
	  | NIL_T { $$ = new absyn::NilExp(0); }
	  | lvalue { $$ = new absyn::VarExp($1->m_pos, (absyn::Var*)$1); }
	  | expr TIMES_T expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::MUL, (absyn::Exp*)$3); }
	  | expr DIV_T expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::DIV, (absyn::Exp*)$3); }
	  | expr PLUS_T expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::PLUS, (absyn::Exp*)$3); }
	  | expr MINUS_T expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::MINUS, (absyn::Exp*)$3); }
	  | expr OR_T expr { $$ = new absyn::IfExp($1->m_pos, (absyn::Exp*)$1, new absyn::IntExp($1->m_pos, 1), (absyn::Exp*)$3); }
	  | expr AND_T expr { $$ = new absyn::IfExp($1->m_pos, (absyn::Exp*)$1, (absyn::Exp*)$3, new absyn::IntExp($1->m_pos, 0)); }
	  | expr EQ_T  expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::EQ, (absyn::Exp*)$3); }
	  | expr LT_T  expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::LT, (absyn::Exp*)$3); }
	  | expr LE_T  expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::LE, (absyn::Exp*)$3); }
	  | expr GT_T  expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::GT, (absyn::Exp*)$3); }
	  | expr GE_T  expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::GE, (absyn::Exp*)$3); }
	  | expr NEQ_T  expr { $$ = new absyn::OpExp($1->m_pos, (absyn::Exp*)$1, absyn::OpExp::NE, (absyn::Exp*)$3); }
	  | lvalue ASSIGN_T expr { $$ = new absyn::AssignExp(0, (absyn::Var*)$1, (absyn::Exp*)$3); }
	  | ID_T '(' exprlist ')' { $$ = new absyn::CallExp(0, symbol::Symbol::symbol(*$1), $3); delete $1; }
	  | ID_T '(' ')' { $$ = new absyn::CallExp(0, symbol::Symbol::symbol(*$1), nullptr); delete $1; }
	  | '(' exprseq ')' { $$ = new absyn::SeqExp(0, $2); }
	  | '(' ')' { $$ = new absyn::SeqExp(0, nullptr); }
	  | ID_T '{' fieldlist '}' { $$ = new absyn::RecordExp(0, symbol::Symbol::symbol(*$1), (absyn::FieldExpList*)$3); delete $1; }
	  | ID_T '{' '}' { $$ = new absyn::RecordExp(0,  symbol::Symbol::symbol(*$1), nullptr); delete $1; }
	  | ID_T '[' expr ']' OF_T expr { $$ = new absyn::ArrayExp(0, symbol::Symbol::symbol(*$1), (absyn::Exp*)$3, (absyn::Exp*)$6); delete $1;}
	  | IF_T expr THEN_T expr { $$ = new absyn::IfExp(0, (absyn::Exp*)$2, (absyn::Exp*)$4); }
	  | IF_T expr THEN_T expr ELSE_T expr { $$ = new absyn::IfExp(0, (absyn::Exp*)$2, (absyn::Exp*)$4, (absyn::Exp*)$6); }
	  | WHILE_T expr DO_T expr { $$ = new absyn::WhileExp(0, (absyn::Exp*)$2, (absyn::Exp*)$4); }
	  | FOR_T ID_T ASSIGN_T expr TO_T expr DO_T expr { $$ = new absyn::ForExp(0, new absyn::VarDec(0, symbol::Symbol::symbol(*$2), new absyn::NameTy(0, symbol::Symbol::symbol("int")), (absyn::Exp*)$4), (absyn::Exp*)$6, (absyn::Exp*)$8); delete $2; }
	  | BREAK_T { $$ = new absyn::BreakExp(0); }
	  | LET_T declarationlist IN_T END_T { $$ = new absyn::LetExp(0, (absyn::DecList*)$2, nullptr); }
	  | LET_T declarationlist IN_T exprseq END_T { $$ = new absyn::LetExp(0, (absyn::DecList*)$2, new absyn::SeqExp(0, (absyn::ExpList*)$4)); }
	  ;



lvalue : lvalue '[' expr ']' { $$ = new absyn::SubscriptVar(0, (absyn::Var*)$1, (absyn::Exp*)$3); }
		| lvalue DOT_T ID_T { $$ = new absyn::FieldVar(0, (absyn::Var*)$1, symbol::Symbol::symbol(*$3)); delete $3; }
		| ID_T { $$ = new absyn::SimpleVar(0, symbol::Symbol::symbol(*$1)); delete $1; }
		| ID_T '[' expr ']' { $$ = new absyn::SubscriptVar(0, new absyn::SimpleVar(0, symbol::Symbol::symbol(*$1)),  (absyn::Exp*)$3); delete $1; }
		;

exprlist : expr { $$ = new absyn::ExpList((absyn::Exp*)$1, nullptr); }
		  | expr ',' exprlist { $$ = new absyn::ExpList((absyn::Exp*)$1, (absyn::ExpList*)$3); }
		  ;

exprseq : expr { $$ = new absyn::ExpList((absyn::Exp*)$1, nullptr); }
		 | expr ';' exprseq { $$ = new absyn::ExpList((absyn::Exp*)$1, (absyn::ExpList*)$3); }
		 ;

fieldlist : ID_T EQ_T expr { $$ = new absyn::FieldExpList(0, symbol::Symbol::symbol(*$1), (absyn::Exp*)$3, nullptr); delete $1;}
		   | ID_T EQ_T expr ',' fieldlist { $$ = new absyn::FieldExpList(0, symbol::Symbol::symbol(*$1), (absyn::Exp*)$3, (absyn::FieldExpList*)$5); delete $1; }
		   ;

declarationlist : declaration { $$ = new absyn::DecList((absyn::Dec*)$1, nullptr); }
				| declaration declarationlist { $$ = new absyn::DecList((absyn::Dec*)$1, $2); }
				;

declaration : typedeclist { $$ = $1; }
			 | variabledeclaration { $$ = $1; }
			 | functiondeclist { $$ = $1; }
			 ;

typedeclist : typedeclaration { $$ = $1; }
			 | typedeclaration typedeclist { $$ = new absyn::TypeDec($1->m_pos, ((absyn::TypeDec*)$1)->m_name, ((absyn::TypeDec*)$1)->m_ty, (absyn::TypeDec*)$2); }
			 ;

typedeclaration : TYPE_T ID_T EQ_T type { $$ = new absyn::TypeDec(0, symbol::Symbol::symbol(*$2), (absyn::Ty*)$4, nullptr); delete $2; }
				;

type : ID_T { $$ = new absyn::NameTy(0, symbol::Symbol::symbol(*$1)); delete $1; }
	  | '{' typefields '}' { $$ = new absyn::RecordTy(0, (absyn::FieldList*)$2); }
	  | '{' '}' { $$ = new absyn::RecordTy(0, nullptr); }
	  | ARRAY_T OF_T ID_T { $$ = new absyn::ArrayTy(0, symbol::Symbol::symbol(*$3)); delete $3; }
	  ;

typefields : ID_T COLON_T ID_T { $$ = new absyn::FieldList(0, symbol::Symbol::symbol(*$1), symbol::Symbol::symbol(*$3), nullptr); delete $1; delete $3; }
			| ID_T COLON_T ID_T ',' typefields { $$ = new absyn::FieldList(0,  symbol::Symbol::symbol(*$1),  symbol::Symbol::symbol(*$3), (absyn::FieldList*)$5); delete $1; delete $3; }
			;


variabledeclaration : VAR_T ID_T ASSIGN_T expr { $$ = new absyn::VarDec(0, symbol::Symbol::symbol(*$2), nullptr, (absyn::Exp*)$4); delete $2; }
					 | VAR_T ID_T COLON_T ID_T ASSIGN_T expr { $$ = new absyn::VarDec(0, symbol::Symbol::symbol(*$2), new absyn::NameTy(0, symbol::Symbol::symbol(*$4)), (absyn::Exp*)$6); delete $2; delete $4; }
					 ;

functiondeclist : functiondeclaration { $$ = $1; }
				| functiondeclaration functiondeclist { $$ = new absyn::FunctionDec($1->m_pos, ((absyn::FunctionDec*)$1)->m_name, ((absyn::FunctionDec*)$1)->m_params,  ((absyn::FunctionDec*)$1)->m_result,   ((absyn::FunctionDec*)$1)->m_body, (absyn::FunctionDec*)$2); }
				 ;

functiondeclaration : FUNC_T ID_T '(' ')' EQ_T expr { $$ = new absyn::FunctionDec(0, symbol::Symbol::symbol(*$2), nullptr, nullptr, (absyn::Exp*)$6, nullptr); delete $2; }
					 | FUNC_T ID_T '(' typefields ')' EQ_T expr { $$ = new absyn::FunctionDec(0, symbol::Symbol::symbol(*$2), (absyn::FieldList*)$4, nullptr, (absyn::Exp*)$7, nullptr); delete $2; }
					 | FUNC_T ID_T '(' ')' COLON_T ID_T EQ_T expr { $$ = new absyn::FunctionDec(0, symbol::Symbol::symbol(*$2), nullptr, new absyn::NameTy(0, symbol::Symbol::symbol(*$6)), (absyn::Exp*)$8, nullptr); delete $2; delete $6; }
					 | FUNC_T ID_T '(' typefields ')' COLON_T ID_T EQ_T expr { $$ = new absyn::FunctionDec(0, symbol::Symbol::symbol(*$2), (absyn::FieldList*)$4, new absyn::NameTy(0, symbol::Symbol::symbol(*$7)), (absyn::Exp*)$9, nullptr); delete $2; delete $7; }
					 ;
%%


int main() {
  yyparse();
  symbol::Symbol::free();
  return 0;
}

