We use the word temporary to mean a value that is temporarily held in a register, and the word label to mean some machine-language location whose exact address is yet to be determined – just like a label in assembly language.  Temp s are abstract names for local variables; label s are abstract names for static memory addresses.

FRAMES
The module frame is in charge of the low level frames''. Higher level frames'' are translate::Level. A Level is basically a Frame that knows the Frame of its parent.

To allocate a new local variable, call function allocLocal which returns a frame::Access. That makes Frame a Factory of Access.

The top level, which is the equivalent of ``main'' in C, of course, also needs a frame.

Calling runtime-system functions. To call an external function named init - Array with arguments a, b, simply generate a CALL such as 
static Label initArray = new Label("initArray");
new CALL(new NAME(initArray), new Tree.ExpList(a, new Tree.ExpList(b, null)));
This refers to an external function initArray which is written in a language such as C or assembly language
But on some operating systems, the C compiler puts an underscore at the beginning of each label; and the calling conventions for C functions may dif- fer from those of MiniJava functions; and C functions don’t expect to receive a static link, and so on. All these target-machine-specific details should be encapsulated into a function externalCall
The old SP becomes the current frame pointer FP.
FP is a “fictional” register whose value is always SP +framesize.

FUNCTION DEFINITION
A function is translated into a segment of assembly language with a prologue,
a body, and an epilogue. The body of a function is an expression, and the body
of the translation is simply the translation of that expression.
The prologue, which precedes the body in the assembly-language version
of the function, contains
1. pseudo-instructions, as needed in the particular assembly language, to an-
nounce the beginning of a function;
2. a label definition for the function name;
3. an instruction to adjust the stack pointer (to allocate a new frame);
4. instructions to save “escaping” arguments into the frame, and to move nonescap-
ing arguments into fresh temporary registers;
5. store instructions to save any callee-save registers – including the return address register – used within the function.
6. the function body.
The epilogue comes after the body and contains
7. an instruction to move the return value (result of the function) to the register
reserved for that purpose;
8. load instructions to restore the callee-save registers;
9. an instruction to reset the stack pointer (to deallocate the frame);
10. a return instruction ( JUMP to the return address);
11. pseudo-instructions, as needed, to announce the end of a function.

Some of these items (1, 3, 9, and 11) depend on exact knowledge of the frame size, which will not be known until after the register allocator deter- mines how many local variables need to be kept in the frame because they don’t fit in registers. So these instructions should be generated very late, in a FRAME function called procEntryExit3

To implement 7, the Translate phase should generate a move instruction MOVE ( RV , body ) that puts the result of evaluating the body in the return value ( RV ) location specified by the machine-specific frame RV.

Item 4 (moving incoming formal parameters), and 5 and 8 (the saving and restoring of callee-save registers),should be done by a function procEntryExit1.
